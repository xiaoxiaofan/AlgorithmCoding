0，1背包问题的解析

描述：已知:有一个容量为V的背包和N件物品，第i件物品的重量是weight[i]，收益是cost[i]。
限制:每种物品只有一件，可以选择放或者不放
问题:在不超过背包容量的情况下，最多能获得多少价值或收益
相似问题:在恰好装满背包的情况下，最多能获得多少价值或收益

f[i][v] : 前i件物品放到一个容量为v的背包中可以获得最大价值
问题1：状态转换方程： f[i][v] = max{ f[i-1][v],f[i-1][v-w[i]] + cost[i] }
解决：两层循环，枚举每一个，枚举容量；

空间优化：
   ...枚举每一个物品
      ...枚举容量(从大到小，防止覆盖)（从小到大是完全背包问题，也就是可以多个）
         ...f[v] = max{f[v],f[v-w[i]]+cost[i]}


问题2：在不超过背包容量的情况下，最多能获得多少价值（可以多个）
   ...枚举每一个物品
      ...枚举容量(从大到小，防止覆盖)（从小到大是完全背包问题，也就是可以多个）
         ...f[v] = max{f[v],f[v-w[i]]+cost[i]}


问题3：在恰好装满背包的情况下，最多能获得多少价值
（除了f[i][0] = 0（第一列）外，其他全为负无穷。）


问题4：已知:有一个容量为V的背包和N件物品，第i件物品最多有Num[i]件，每件物品的重量是weight[i]，收益是cost[i]。
限制:在不超过背包容量的情况下，最多能获得多少价值或收益
f[i][v] = max(f[i][v],f[i - 1][V - k * Weight[i]] + k * Value[i]);  
其中0 <= k <= min(Num[i],V/Weight[i]);//这里和完全背包不同。  



问题5：


问题6：


问题7：


问题8：


问题9：




http://blog.csdn.net/insistgogo/article/details/8579597
http://blog.csdn.net/insistgogo/article/details/11176693
